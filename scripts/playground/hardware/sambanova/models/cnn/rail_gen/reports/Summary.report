========= Summary IR ========
tbuffer LogregTorchSamba_partition_1_0__ptconvlstm__conv_layer__conv1d__conv2d_Conv2d_bwd_accum_tbuf loc("software/compiler/apps/rail/par_accum/template/src/ParAccum.cpp":442:0)
layout: <BF16[480, 256]CVRM/64@0x0> vec_order: {0, 1} vec_dim: 0 depth: 1 dims: {480, 256}
    ctx: w_loop_0_0 loc("software/compiler/apps/rail/par_accum/template/src/ParAccum.cpp":342:0)
    disable_full_stall type: write ctxid: 0 
        ctx done: iter1.done() (3840 # steps)
        chain : addr_chain  (3840 # steps): 
          iter[0] : (0 until 1 by 1 par 1)
          iter[1] : (0 until 480 by 32 par 1)
          iter[2] : (0 until 256 by 1 par 1)
        addr[0] : (0 until 480 by 32 par 1) vec: 1
        addr[1] : (0 until 256 by 1 par 1) vec: 0
        en : ((0 until 480 by 32 par 1) >= 0 && (0 until 480 by 32 par 1) < 480) kPredicateDrop
    ctx: kBackReadCtx loc("software/compiler/apps/rail/par_accum/template/src/ParAccum.cpp":487:0)
    pacing_window: default disable_empty_stall port: READ0 ctxid: 0 
        ctx done: iter0.done() (3840 # steps)
        chain : addr_chain  (3840 # steps): 
          iter[0] : (0 until 480 by 32 par 1)
          iter[1] : (0 until 256 by 1 par 1)
        addr[0] : (0 until 480 by 32 par 1) vec: 1
        addr[1] : (0 until 256 by 1 par 1) vec: 0
        en : 1 kPredicateForceZero
========= Summary IR ========
tbuffer LogregTorchSamba_partition_1_0__ptconvlstm__conv_layer__conv1d__conv2d_Conv2d_bwd_accum_1_tbuf loc("software/compiler/apps/rail/par_accum/template/src/ParAccum.cpp":442:0)
layout: <BF16[256, 1]CVRM/64@0x0> vec_order: {0, 1} vec_dim: 0 depth: 1 dims: {256, 1}
    ctx: w_loop_0_0 loc("software/compiler/apps/rail/par_accum/template/src/ParAccum.cpp":342:0)
    disable_full_stall type: write ctxid: 0 
        ctx done: iter1.done() (8 # steps)
        chain : addr_chain  (8 # steps): 
          iter[0] : (0 until 1 by 1 par 1)
          iter[1] : (0 until 256 by 32 par 1)
          iter[2] : (0 until 1 by 1 par 1)
        addr[0] : (0 until 256 by 32 par 1) vec: 1
        addr[1] : (0 until 1 by 1 par 1) vec: 0
        en : ((0 until 256 by 32 par 1) >= 0 && (0 until 256 by 32 par 1) < 256) kPredicateDrop
    ctx: kBackReadCtx loc("software/compiler/apps/rail/par_accum/template/src/ParAccum.cpp":487:0)
    pacing_window: 8 disable_empty_stall port: READ0 ctxid: 0 
        ctx done: iter0.done() (8 # steps)
        chain : addr_chain  (8 # steps): 
          iter[0] : (0 until 256 by 32 par 1)
          iter[1] : (0 until 1 by 1 par 1)
        addr[0] : (0 until 256 by 32 par 1) vec: 1
        addr[1] : (0 until 1 by 1 par 1) vec: 0
        en : 1 kPredicateForceZero
